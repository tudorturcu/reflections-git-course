When would you want to use a remote repository rather than keeping all your work
 local?

When:
  - the project you are working on has multiple collaborators working from
   different computers
  - you want to have a backup of your repository on a remote server
  - when you want to share what you are working on with the world



Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

When you don't want to publish your changes, and group them to make more sense,
rather then send them one at a time. 
Also, maybe you are working on multiple branches and only want to push one of 
them.



Describe the differences between forks, clones, and branches. When would you use
 one instead of another?

 - forks - for copying repositories on GitHub; also helps with backlinks to the
 original repo and makes it easier to suggest modifications
 - clone - when cloning or copying repositories to your local computer, either
 from a remote server or from a different location on your local computer
 - branch - when you want a separate thread of work, when implementing a new 
 feature or testing, building on existing commits instead of starting from
 scratch



 What is the benefit of having a copy of the last known state of the remote 
 stored locally?

 - you can instantly know what you modified since you last pulled, without 
 needing internet access. 
 - it makes it easier to resolve conflicts by  fetching first and then merging
 - you can delay merging and continue working on your local branch



 How would you collaborate without using Git or GitHub? What would be easier, 
 and what would be harder?

 Without using Git:

 - easier to work on one thread, less overhead

 - harder to work on multiple threads
 - harder to track changes
 - harder to revert to a previous version
 - harder to collaborate with others on a project
 - harder to debug

Without using GitHub

- harder to collaborate with others (although not impossible)



When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?

You want to make changes in a separate branch when you are collaborating with
others and adding a new feature. You want feedback on your work before it 
becomes part of the master branch.

You want to work directly in master when you are still in the early stages of
developing a backbone of the project, but even then it might be a good idea 
to first work and test features separteley. When you work alone, you may also 
work directly in master since you know what changed and can revert to a previous
commit without affecting anyone else. Still, you may also want to have a 
"stable" version and test new features separately.